account-service account- there are service account resource managed by the k8s api
normal user-there is no k8s user resource-it is assumed that a cluster independent service manages normal users
  so what is a n normal user 
  there is no k8s user resources
  a user is soimeone with a cert and key
  client certificate-client signed by the cluster certificate autority CA username under common name /CN=jane]
  openssl - csr - certificate singing request-ca in kubernetes-crt-certificate singing request we as an user can download and we can distribute the user
  #exercise to be done we will create a normal user as jane
  create a certifciate+key and authentication as user jane
  1. create csr
  2. sign csr using kubernetes api
  3. use cert + key to connect to k8s api
  create key + create csr -api-download crt from api use crt+key
  ########
  root@k8s-master-node:~# openssl genrsa -out jane.key 2048
  #####generate the csr
  root@k8s-master-node:~# openssl req -new -key jane.key -out jane.csr
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:
State or Province Name (full name) [Some-State]:
Locality Name (eg, city) []:
Organization Name (eg, company) [Internet Widgits Pty Ltd]:
Organizational Unit Name (eg, section) []:
Common Name (e.g. server FQDN or YOUR name) []:jane #add this common name to whom yuou are createing a user
Email Address []:

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:
root@k8s-master-node:~# ls
custom-resources.yaml  jane.csr  jane.key
root@k8s-master-node:~# 
############################
  now we will create a kubernetes resource called as certificate singing request 
  https://kubernetes.io/docs/reference/access-authn-authz/certificate-signing-requests/
################
  vi csr.yml
  ###########################
  apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: jane # example
spec:
  groups:
  - system:authenticated
  # This is an encoded CSR. Change this to the base64-encoded contents of myuser.csr  request: todo
  signerName: kubernetes.io/kube-apiserver-client
  expirationSeconds: 86400  # one day
  usages:
  - client auth
    #########in the todo section we need to add the certificate
    root@k8s-master-node:~# cat jane.csr | base64
      ##we have line break to remove the line break
      root@k8s-master-node:~# cat jane.csr | base64 -w 0
        ##lets create and check the same
        root@k8s-master-node:~# k -f csr.yml create
certificatesigningrequest.certificates.k8s.io/jane created
root@k8s-master-node:~# kubectl get csr
NAME   AGE   SIGNERNAME                            REQUESTOR          REQUESTEDDURATION   CONDITION
jane   30s   kubernetes.io/kube-apiserver-client   kubernetes-admin   <none>              Pending
root@k8s-master-node:~# 
##but the condtion it show is pending
  ##we need to approve the 
  root@k8s-master-node:~# k certificate approve jane
certificatesigningrequest.certificates.k8s.io/jane approved
root@k8s-master-node:~# kubectl get csr
NAME   AGE   SIGNERNAME                            REQUESTOR          REQUESTEDDURATION   CONDITION
jane   79s   kubernetes.io/kube-apiserver-client   kubernetes-admin   <none>              Approved,Issued
  ##############
  109  kubectl get csr jane -o yaml
  #the above command will show the certicate decode it using base 64 
  echo LS0tVJUSUZJQ0FURS0tLS0tCg== | base64 -d
  #store the same in a crt file
  
  111  echo LS0tLS1S0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg== | base64 -d > jane.crt
  #######################
  now we will use the jane crt and key to connect to the kubernetes api server how to do it 
  kubectl config view
  ##this will show one cluster and one context this will show only the admin user kubernetes-admin
  #we will create another user for jane and another context for jane 
  root@k8s-master-node:~# kubectl config set-credentials jane --client-key=jane.key --client-certificate=jane.crt
User "jane" set.
root@k8s-master-node:~# 
  ###3once done 
  ##embeded the certificate
  root@k8s-master-node:~# kubectl config set-credentials jane --client-key=jane.key --client-certificate=jane.crt --embed-certs
User "jane" set
  kubectl config view 
  #now the user is overwritten and included in config view of our kubernetes cluster
  #now we need to have context to connect to the existing k8s cluster
  ##3add the context as user jane 
  root@k8s-master-node:~# kubectl config set-context jane --user=jane --cluster=kubernetes
Context "jane" created.
  #3now we can see jane as context
  root@k8s-master-node:~# kubectl config get-contexts
CURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE
          jane                          kubernetes   jane               
*         kubernetes-admin@kubernetes   kubernetes   kubernetes-admin   
  #lets verify the same as jane context 
  root@k8s-master-node:~# kubectl config use-context jane
Switched to context "jane".
root@k8s-master-node:~# kubectl config get-contexts
CURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE
*         jane                          kubernetes   jane               
          kubernetes-admin@kubernetes   kubernetes   kubernetes-admin   
root@k8s-master-node:~# 
  ##you will see the pointer in jane context 
  ##now check i can see the namespace or not

  root@k8s-master-node:~# kubectl get ns
Error from server (Forbidden): namespaces is forbidden: User "jane" cannot list resource "namespaces" in API group "" at the cluster scope
root@k8s-master-node:~# kubectl get deployment
Error from server (Forbidden): deployments.apps is forbidden: User "jane" cannot list resource "deployments" in API group "apps" in the namespace "default"
root@k8s-master-node:~# kubectl -n blue get secrets
No resources found in blue namespace.
root@k8s-master-node:~# kubectl -n blue delete secret
error: resource(s) were provided, but no name was specified
root@k8s-master-node:~# kubectl -n blue delete secrets
error: resource(s) were provided, but no name was specified
  #as we have given jane full dewlete access as cluster role in jane
root@k8s-master-node:~# kubectl auth can-i delete deployment -A
yes
root@k8s-master-node:~# kubectl auth can-i delete pod -A
no
root@k8s-master-node:~# 
